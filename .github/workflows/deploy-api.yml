# name: Deploy a specific API

# on:
#   workflow_call:
#     inputs:
#       path:
#         required: true
#         type: string
#     # outputs:
#     #   firstword:
#     #     description: "The first output string"
#     #     value: ${{ jobs.example_job.outputs.output1 }}
#     #   secondword:
#     #     description: "The second output string"
#     #     value: ${{ jobs.example_job.outputs.output2 }}
#   workflow_dispatch:
#     inputs:
#       path:
#         required: true
#         type: string
#         description: Path to the root API directory being deployed
#     # outputs:
#     #   firstword:
#     #     description: "The first output string"
#     #     value: ${{ jobs.example_job.outputs.output1 }}
#     #   secondword:
#     #     description: "The second output string"
#     #     value: ${{ jobs.example_job.outputs.output2 }}

# jobs:
#   validate_bicep:
#     name: "Validate Bicep files"
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@2

#       - name: Validate that bicep builds
#         run: az bicep build -f main.bicep
#         working-directory: ${{ inputs.path }}

#   # deployment:
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     - uses: azure/login@v1
#   #       with:
#   #         creds: ${{ secrets.AZURE_CREDENTIALS }}
#   #     - name: deploy
#   #       uses: azure/arm-deploy@v1
#   #       with:
#   #         subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
#   #         scope: subscription
#   #         region: ${{ fromJson(env.config).AZURE_LOCATION }}
#   #         template: ./reference-implementations/AppGW-IAPIM-Func/bicep/main.bicep
#   #         parameters: > 
#   #           workloadName=${{ fromJson(env.config).RESOURCE_NAME_PREFIX }} environment=${{ fromJson(env.config).ENVIRONMENT_TAG }} 
#   #           vmUsername=${{ fromJson(env.config).VM_USERNAME }} vmPassword=${{ secrets.VM_PW }} 
#   #           accountName=${{ secrets.ACCOUNT_NAME }} personalAccessToken=${{ secrets.PAT }} CICDAgentType=${{ fromJson(env.config).CICD_AGENT_TYPE}}
#   #           appGatewayFqdn=${{ secrets.FQDN }} certificatePassword=${{ secrets.CERTPW }} appGatewayCertType=${{ fromJson(env.config).CERT_TYPE }}

